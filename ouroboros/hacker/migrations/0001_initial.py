# Generated by Django 2.2.2 on 2019-06-24 04:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hacker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('first_name', models.CharField(max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(max_length=255, verbose_name='last name')),
                ('rsvp_deadline', models.DateTimeField(null=True)),
                ('cant_make_it', models.BooleanField(default=False)),
                ('checked_in', models.NullBooleanField()),
                ('checked_in_datetime', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Wave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Rsvp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Provide any additional notes and/or comments in the text box provided', max_length=300)),
                ('date_rsvped', models.DateField(auto_now_add=True)),
                ('hacker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('NB', 'Non-binary'), ('NA', 'Prefer not to disclose')], max_length=2)),
                ('classification', models.CharField(choices=[('U1', 'U1'), ('U2', 'U2'), ('U3', 'U3'), ('U4', 'U4')], max_length=2)),
                ('grad_year', models.IntegerField(choices=[(2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)], verbose_name='graduation year')),
                ('dietary_restrictions', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Vegan', 'Vegan'), ('Vegetarian', 'Vegetarian'), ('Halal', 'Halal'), ('Kosher', 'Kosher'), ('Food Allergies', 'Food Allergies')], max_length=44, verbose_name='dietary restrictions')),
                ('travel_reimbursement_required', models.BooleanField(default=False)),
                ('num_hackathons_attended', models.PositiveSmallIntegerField(default=0)),
                ('previous_attendant', models.BooleanField(default=False)),
                ('tamu_student', models.BooleanField(default=True)),
                ('interests', models.TextField(max_length=200)),
                ('essay1', models.TextField(max_length=200)),
                ('essay2', models.TextField(blank=True, max_length=200, null=True)),
                ('essay3', models.TextField(blank=True, max_length=200, null=True)),
                ('essay4', models.TextField(blank=True, max_length=200, null=True)),
                ('notes', models.TextField(blank=True, help_text='Provide any additional notes and/or comments in the text box provided', max_length=300)),
                ('resume', models.FileField(upload_to='')),
                ('approved', models.NullBooleanField()),
                ('hacker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wave', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hacker.Wave')),
            ],
        ),
    ]
